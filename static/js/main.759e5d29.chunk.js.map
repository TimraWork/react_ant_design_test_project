{"version":3,"sources":["components/Timer/Timer.tsx","customHooks/useInput.tsx","components/ModalAddCard/ModalAddCard.tsx","localState/cardContext.ts","utils/invertHex.ts","components/ButtonAddCard/ButtonAddCard.tsx","utils/generateHex.ts","localState/cardReducer.ts","components/ModalDeleteCard/ModalDeleteCard.tsx","components/CardItem/CardItem.tsx","components/FilterCards/FilterCards.tsx","components/CardsContainer/CardsContainer.tsx","App.tsx","index.tsx"],"names":["Timer","initialSeconds","useState","seconds","setSeconds","useEffect","timerInterval","setInterval","clearInterval","className","useInput","initialValue","value","setValue","error","setError","onChange","event","target","onBlur","reset","ModalAddCard","isModalVisible","handleOk","handleCancel","city","population","isCreateButtonDisable","setIsCreateButtonDisable","afterClose","title","visible","destroyOnClose","onCancel","footer","type","onClick","disabled","direction","style","width","autoFocus","placeholder","CardContext","createContext","cardState","dispatchCard","invertHex","hex","Number","toString","substr","toUpperCase","ButtonAddCard","useContext","setIsModalVisible","Math","floor","random","payload","backgroundColor","textColor","React","memo","cardReducer","state","action","id","uuidv4","filter","el","ModalDeleteCard","onOk","cancelText","okText","CardItem","background","color","border","borderRadius","extra","shape","borderColor","icon","DeleteOutlined","FilterCards","onSearch","size","allowClear","e","CardsContainer","cards","setCards","searchValue","setSearchValue","newCards","includes","length","gutter","justify","map","xs","sm","md","lg","xl","message","showIcon","Content","Layout","Header","localStorageData","localStorage","getItem","localStorageParsedData","JSON","parse","App","useReducer","setItem","stringify","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.759e5d29.chunk.js","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport './Timer.scss';\n\nexport type ITimerProps = {\n    initialSeconds?: number\n}\n\nconst Timer: React.FC<ITimerProps> = ({ initialSeconds = 0 }) => {\n    const [ seconds, setSeconds ] =  useState(initialSeconds);\n\n    useEffect(() => {\n        let timerInterval = setInterval( () => setSeconds(seconds + 1), 1000);\n        return () => clearInterval(timerInterval);\n    });\n\n    return <div className=\"Timer\"> Прошло - {seconds} секунд </div>;\n}\n\nexport { Timer };","import { useState } from \"react\";\n\nconst useInput = (initialValue: string) => {\n    const [value, setValue] = useState(initialValue);\n    const [error, setError] = useState(\"\");\n\n    const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.target.value);\n    };\n\n    const reset = () => {\n        setValue(\"\");\n        setError(\"\");\n    }\n\n    const handleBlur = (event:React.FocusEvent<HTMLInputElement>) => {\n        if(!event.target.value) {\n            setError(\"Заполните обязательное поле\");\n        } else {\n            setError(\"\");\n        }\n    }\n\n    return {\n        value,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        reset,\n        error\n    };\n};\n\nexport default useInput;","import { Input, Modal, Space, Button } from 'antd';\nimport React, {useEffect, useState} from 'react';\nimport useInput from '../../customHooks/useInput';\n\nexport type IModalAddCardProps = {\n    isModalVisible: boolean,\n    handleOk: (city: string, population: string) => void,\n    handleCancel: () => void\n}\n\nconst ModalAddCard: React.FC<IModalAddCardProps> = ({ isModalVisible, handleOk, handleCancel }) => {\n    const city = useInput(\"\");\n    const population = useInput(\"\");\n\n    const [isCreateButtonDisable, setIsCreateButtonDisable] = useState(true);\n\n    useEffect(() => {\n        if(city.error || population.error) {\n            setIsCreateButtonDisable(true);\n        }\n        else if(!(city.error && population.error)) {\n            setIsCreateButtonDisable(false);\n        }\n    }, [city, population]);\n\n    const onModalClose = () => {\n       city.reset();\n       population.reset();\n    }\n\n    return (\n        <Modal\n            afterClose={onModalClose}\n            title=\"Создать карточку\"\n            visible={isModalVisible}\n            destroyOnClose={true}\n            onCancel={handleCancel}\n            footer={[\n                <Button key=\"reset\" type=\"default\" onClick={handleCancel} > Отмена </Button>,\n                <Button key=\"submit\" type=\"primary\" onClick={() => handleOk(city.value, population.value)} disabled={isCreateButtonDisable}> Создать </Button>,\n            ]}\n        >\n            <Space direction=\"vertical\" style={{ width: '100%' }}>\n                <Input autoFocus={true} placeholder=\"Введите название города\" value={city.value} onChange={city.onChange} onBlur={city.onBlur} />\n                {city.error && <div className=\"error\">{city.error}</div>}\n                <Input type=\"number\" placeholder=\"Введите численность населения\" value={population.value} onChange={population.onChange} onBlur={population.onBlur} />\n                {population.error && <div className=\"error\">{population.error}</div>}\n            </Space>\n        </Modal>\n    );\n}\n\nexport { ModalAddCard };","import { ActionTypes } from './../@types/types.d';\nimport {createContext} from 'react';\n\nexport type CardType = {\n    id: string;\n    city: string;\n    population: string;\n    backgroundColor: string;\n    textColor: string;\n}\n\nexport type InitialStateType = CardType[] | [];\n\nexport const CardContext = createContext<{\n    cardState: InitialStateType;\n    dispatchCard: React.Dispatch<ActionTypes>;\n}>({\n    cardState: [],\n    dispatchCard: () => null\n  });","export const invertHex = (hex:string) => {\n    return (Number(`0x1${hex}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase(); \n}\n\n// invertHex('00FF00'); // Returns FF00FF","import React, {useState, useContext} from 'react';\nimport { Button } from 'antd';\nimport { ModalAddCard } from '../ModalAddCard/ModalAddCard';\nimport './ButtonAddCard.scss'\nimport { CardContext } from '../../localState/cardContext';\nimport { generateHex } from '../../utils/generateHex';\nimport { invertHex } from '../../utils/invertHex';\n\nconst ButtonAddCard: React.FC = () => {\n    const { dispatchCard } = useContext(CardContext);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const showModal = () => setIsModalVisible(true);\n    const handleCancel = () => setIsModalVisible(false);\n\n    const handleOk = (city:string, population: string) => {\n        const hex = generateHex();\n        dispatchCard({\n            type: 'add',\n            payload: {\n                city,\n                population,\n                backgroundColor: \"#\" + hex,\n                textColor: \"#\" + invertHex(hex)\n            }\n        })\n        setIsModalVisible(false);\n    }\n\n    return (\n        <div className=\"ButtonAddCard\">\n            <Button onClick={showModal} className=\"animationPulse\" type=\"primary\">Создать карточку</Button>\n            <ModalAddCard isModalVisible={isModalVisible} handleOk={handleOk} handleCancel={handleCancel} />\n        </div>\n    );\n}\n\nexport default React.memo(ButtonAddCard);","export const generateHex = () => Math.floor(Math.random()*16777215).toString(16);","import { ActionTypes } from './../@types/types.d';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CardType, InitialStateType } from './cardContext';\n\nexport function cardReducer(state:InitialStateType, action:ActionTypes) : InitialStateType {\n    switch(action.type) {\n        case 'add': {\n            const { city, population, backgroundColor, textColor } = action.payload;\n            return [\n                ...state,\n                {\n                    id: uuidv4(),\n                    city,\n                    population,\n                    backgroundColor,\n                    textColor\n                }\n            ]\n        }\n        case 'delete': {\n            const { id } = action.payload;\n            return state.filter( (el:CardType) => el.id !== id );\n        }\n        default:\n            return state;\n    }\n}","import { Modal } from 'antd';\nimport React from 'react';\n\nexport type IModalDeleteCardProps = {\n    isModalVisible: boolean,\n    handleOk: () => void,\n    handleCancel: () => void\n}\n\nconst ModalDeleteCard: React.FC<IModalDeleteCardProps> = ({ handleOk, handleCancel, isModalVisible }) => {\n    return (\n        <Modal destroyOnClose={true} title=\"Удалить карточку\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel} cancelText=\"Отмена\" okText=\"Удалить\">\n        Вы действительно хотите удалить карточку?\n    </Modal>\n    );\n}\n\nexport { ModalDeleteCard };","import React, {useState, useContext} from 'react';\nimport { Card, Button, Tooltip } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { ModalDeleteCard } from '../ModalDeleteCard/ModalDeleteCard';\nimport { CardContext, CardType } from '../../localState/cardContext';\nimport './CardItem.scss';\n\nexport type ICardItemProps = {\n    el: CardType\n}\n\nconst CardItem: React.FC<ICardItemProps> = ({ el }) => {\n    const { dispatchCard } = useContext(CardContext);\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const onCardDelete = () => setIsModalVisible(true);\n    const handleCancel = () => setIsModalVisible(false);\n\n    const onDeleteCard = () => {\n        dispatchCard({\n            type: 'delete',\n            payload: {\n                id: el.id\n            }\n        })\n        setIsModalVisible(false);\n    }\n\n    return (\n      <>\n        <Card\n          className=\"CardItem\"\n          style={{background: el.backgroundColor, color: el.textColor, border: 'none', borderRadius: '5px'}}\n          title={<span style={{color: el.textColor}}>{el.city}</span>}\n          extra={\n            <Tooltip title=\"Удалить\">\n              <Button onClick={onCardDelete} shape=\"circle\" type=\"primary\" style={{backgroundColor: el.textColor, borderColor: el.textColor}} icon={<DeleteOutlined />} />\n            </Tooltip>\n          }\n        >\n          <p>Численность: {el.population}</p>\n        </Card>\n        <ModalDeleteCard isModalVisible={isModalVisible} handleOk={onDeleteCard} handleCancel={handleCancel} />\n      </>\n    );\n}\n\nexport { CardItem };","import React from 'react';\nimport { Input, Space } from 'antd';\nimport './FilterCards.scss';\n\nexport type ICardItemProps = {\n    onSearch: (value: string) => void\n}\n\nconst FilterCards: React.FC<ICardItemProps> = ({ onSearch }) => {\n    return (\n        <div className=\"FilterCards\">\n            <Space direction=\"horizontal\" size=\"large\" >\n                <Input placeholder=\"Поиск\" allowClear onChange={(e:React.ChangeEvent<HTMLInputElement>) => onSearch(e.target.value)}/>\n            </Space>\n        </div>\n    );\n}\n\nexport { FilterCards };","import React, { useContext, useState, useEffect } from 'react';\nimport { CardContext } from '../../localState/cardContext';\nimport { CardItem } from '../CardItem/CardItem';\nimport { Alert, Col, Row } from 'antd';\nimport { FilterCards } from '../FilterCards/FilterCards';\n\nconst CardsContainer: React.FC = () => {\n    const { cardState } = useContext(CardContext);\n\n    const [cards, setCards] = useState(cardState);\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const onSearch = (value: string) => {\n        setSearchValue(value);\n    }\n\n    useEffect(() => {\n        if(searchValue) {\n            const newCards = cardState.filter(({city, population} ) => (city.includes(searchValue) || population.includes(searchValue)));\n            setCards( newCards );\n        } else {\n            setCards( cardState );\n        }\n    }, [cardState, searchValue]);\n\n    return (\n        <>\n            { cardState.length > 1 ? <FilterCards onSearch={onSearch} /> : null}\n\n            <Row gutter={[10, 10]} justify=\"center\" >\n                { cards.map((el)=>(\n                    <Col key={el.id} xs={24} sm={12} md={8} lg={6} xl={4}><CardItem el={el} /></Col>\n                ))}\n                {!cardState.length ? <Alert message=\"Добавьте карточку ↑\" type=\"info\" showIcon /> : null}\n                {!cards.length && cardState.length ? <Alert message=\"Нет карточек, соответствующих строке поиска\" type=\"info\" showIcon /> : null}\n            </Row>\n        </>\n    );\n}\n\nexport { CardsContainer };","import React, {useReducer} from 'react';\nimport \"./assets/scss/common.scss\";\nimport { Layout } from 'antd';\nimport { Timer } from './components/Timer/Timer';\nimport ButtonAddCard from './components/ButtonAddCard/ButtonAddCard';\nimport { cardReducer } from './localState/cardReducer';\nimport { CardContext, CardType } from './localState/cardContext';\nimport { CardsContainer } from './components/CardsContainer/CardsContainer';\nimport { useEffect } from 'react';\n\nconst { Content, Header } = Layout;\nconst localStorageData = localStorage.getItem(\"localState\");\nconst localStorageParsedData:CardType[] = localStorageData ? JSON.parse(localStorageData) : [];\n\nconst App: React.FC = () => {\n  const [cardState, dispatchCard] = useReducer(cardReducer, localStorageParsedData);\n\n  useEffect(() => {\n    localStorage.setItem(\"localState\", JSON.stringify(cardState));\n  }, [cardState])\n\n  return (\n      <Layout>\n        <Header>\n          <Timer />\n        </Header>\n        <Content>\n          <CardContext.Provider value={{ cardState, dispatchCard }}>\n            <ButtonAddCard />\n            <CardsContainer />\n          </CardContext.Provider>\n        </Content>\n      </Layout>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );\n"],"sourceRoot":""}